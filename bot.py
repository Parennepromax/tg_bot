import logging #–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–æ–≥–∏
import random #–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ
import requests #–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–∞–π—Ç
import datetime #–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
import config #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–æ—Ç–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ–≥–æ–¥—ã
import keyboards as kb #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–Ω–æ–ø–∫–∏

from aiogram import Bot, Dispatcher, executor, types
from database import dbase #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å, —Å –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞–º–∏ –º–µ—Ç–æ–¥–∞–º–∏

# log
logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN) #–ø–µ—Ä–µ–¥–∞—ë–º –±–æ—Ç—É
dp = Dispatcher(bot)

db = dbase('db.db')


@dp.message_handler(commands=['start']) #–ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º
async def welcome(message: types.Message):
    if not db.subscriber_exists(message.from_user.id): #–ø—Ä–æ–≤–µ—Ä—è–µ–º id —é–∑–µ—Ä–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ subscriptions
        db.add_subscriber(message.from_user.id) #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    with open('data/welcome_st.tgs', 'rb') as welcoming: #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—à –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –≤ —Ñ–∞–π–ª
        await message.answer_sticker(welcoming) #–æ—Ç—Å—ã–ª–∞–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("Hi\n I'm Your Personal Bot!", reply_markup=kb.mainMark) #–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º


@dp.message_handler(commands=['subscribe']) #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def subscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        db.add_subscriber(message.from_user.id)
    else:
        db.update_subscription(message.from_user.id, True) #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –≤–∫–ª–ª—é—á–∞–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!") #–≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ


@dp.message_handler(commands=['unsubscribe']) #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
async def unsubscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        db.add_subscriber(message.from_user.id, False)
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.") #–≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        db.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã.")


@dp.message_handler(commands=['weather']) #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
async def get_weather(message: types.Message):
    city = message.text.split()[-1]
    weather_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B",
        "Fog": "–¢—É–º–∞–Ω \U0001F32B"
    }

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={config.WEATHER_TOKEN}&units=metric"
        )
        data = r.json()

        town = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in weather_smile:
            wd = weather_smile[weather_description]
        else:
            wd = "Look at window \U000026A0" #—è –±—Ä–∞–ª –Ω–µ –≤—Å–µ —Ç–∏–ø—ã –ø–æ–≥–æ–¥—ã —Å —Å–∞–π—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        await message.answer(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                             f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {town}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞\n{wd}\n"
                             f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n"
                             f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}"
                             )
    except Exception:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞...\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ.")


@dp.message_handler(commands=['help']) #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏
@dp.message_handler(lambda message: message.text and '–£–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã ‚§µÔ∏è' in message.text) #–µ—Å–ª–∏ –∫–æ
async def help(message: types.Message):
    with open('data/allCommands.txt', 'r', encoding="utf-8") as f:
        text = f.read()
    await message.answer('All commands:\n' + text, reply_markup=kb.mainMark)


@dp.message_handler(commands=['test']) #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∞
async def echo(message: types.Message):
    await message.answer("–Ø —Ä–∞–±–æ—Ç–∞—é, –≤—Å—ë —Ö–æ—Ä–æ—à–æ!")


@dp.message_handler(regexp='(^cat[s]?$|puss|^–∫–æ—à–∫[–∞,–∏]?$)') #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—à–∫–∏
async def cats(message: types.Message):
    with open('data/cat1.jpg', 'rb') as photo:
        await message.answer_photo(photo, caption='Cats are here üò∫') #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é


@dp.message_handler(regexp='(^dog[s]?$|hound|^—Å–æ–±–∞–∫[–∞,–∏]?$)') #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±–∞–∫–∏
async def dogs(message: types.Message):
    with open('data/dog1.jpg', 'rb') as photo:
        await message.answer_photo(photo, caption='Dogs are here üêï') #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é


@dp.message_handler(regexp='(^horse[s]?$|equine|^–ª–æ—à–∞–¥[—å,–∏]?$)') #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—à–∞–¥–∏
async def horses(message: types.Message):
    with open('data/horse1.jpg', 'rb') as photo:
        await message.answer_photo(photo, caption='Horses are here üêé') #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é


@dp.message_handler(regexp='(^parrot[s]?$|^–ø–æ–ø—É–≥–∞[–π,–∏]?$)') #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø—É–≥–∞—è
async def parrots(message: types.Message):
    with open('data/parrot1.jpg', 'rb') as photo:
        await message.answer_photo(photo, caption='Parrots are here ü¶ú') #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é


@dp.message_handler(regexp='(^giraffe[s]?$|^–∂–∏—Ä–∞—Ñ[—ã]?$)') #–µ—Å–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∏—Ä–∞—Ñ–∞
async def giraffes(message: types.Message):
    with open('data/giraffe1.jpg', 'rb') as photo:
        await message.answer_photo(photo, caption='Giraffes are here ü¶í') #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é


@dp.message_handler(content_types=['text'])  #–µ—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Ä–∞–Ω—å—à–µ
async def work(message: types.Message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç üëã":
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç üëã", reply_markup=kb.mainMark)
    elif message.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É üå§":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather <city> \n***\n"
                             "–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ", reply_markup=kb.mainMark)
    elif message.text == "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ üé≤":
        await message.answer(str(random.randint(0, 100)), reply_markup=kb.mainMark)
    elif message.text == "–°–ª—É—á–∞–π–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ üëª":
        animals = { #—Å–¥–µ–ª–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ —Å–¥–µ–ª–∞–ª–∏ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –±—ã–ª–æ –ª–µ–≥–∫–æ –ø–æ—Ç–æ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é random
            1: "data/cat1.jpg",
            2: "data/dog1.jpg",
            3: "data/horse1.jpg",
            4: "data/parrot1.jpg",
            5: "data/giraffe1.jpg"
        }
        with open(f'{animals[random.randint(1, 5)]}', 'rb') as photo:
            await message.answer_photo(photo, caption='Random animal is ready', reply_markup=kb.mainMark)
    else:
        await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–Ω–æ–ø–∫—É.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
